#!/usr/bin/env node
var execSync = require('child_process').execSync;
var path = require('path');
var fs = require('fs-extra');
var argv = require('optimist').argv;
var semver = require('semver');
var color = require('colors');
var checkoutbranch = require('../lib/checkoutbranch');
var cwd = process.cwd();
var HOME = process.env.HOME;
var defaultOption = {
  cwd: cwd,
  stdio: 'inherit'
};
if (argv['_'].length == 0) {
  console.error('必须有参数'.red);
  process.exit(0);
}
var firstArg = argv['_'][0];
var gsyncFile = path.join(cwd, 'gitsync.conf.json');
fs.ensureFileSync(gsyncFile);
var gsyncCfg = fs.readJsonSync(gsyncFile, {throws: false});
var targetVersion;
var privateName;
if (!gsyncCfg || !gsyncCfg.name || !gsyncCfg.del) {
  console.error('工程内的配置文件(gitsync.conf.json)内容不完整'.red);
  process.exit(0);
}
privateName = gsyncCfg.name;
targetVersion = argv['_'][0];
if (!semver.valid(targetVersion)) {
  console.error('请输入daily版本号'.red);
  process.exit(0);
}

var curBranch = execSync('git symbolic-ref HEAD').toString().trim().replace('refs/heads/','');
var privateBranch = 'dev/' + privateName + '-' + targetVersion;
var dailyBranch = 'daily/' + targetVersion;

if (curBranch == privateBranch || curBranch == dailyBranch) {
  console.error('当前分支为个人分支或者daily分支，不是开发分支'.red);
  process.exit(0);
}
execSync('git add .');
try {
  execSync('git commit -am "git sync"');
} catch (e) {

}
gsyncCfg.del.forEach(function(delDir) {
  execSync('rm -rf ' + delDir);
})

checkoutbranch(privateBranch);

execSync('git merge ' + curBranch, defaultOption);
execSync('git add .');
try {
  execSync('git commit -am "merge ' + curBranch + '"');
} catch (e) {

}
execSync('git push -u origin ' + privateBranch);
execSync('git checkout master');
execSync('git pull');

checkoutbranch(dailyBranch);

try {
  execSync('git merge ' + privateBranch, defaultOption);
} catch (e) {
  console.info('merge完成解决冲突，并重新build工程后，再commit'.yellow);
}

// execSync('git push -u origin ' + dailyBranch);
