#!/usr/bin/env node
var execSync = require('child_process').execSync;
var path = require('path');
var fs = require('fs-extra');
var argv = require('optimist').argv;
var semver = require('semver');
var cwd = process.cwd();
var defaultOption = {
  cwd: cwd,
  stdio: 'inherit'
};
if (argv['_'].length == 0) {
  console.error('必须有参数');
  process.exit(0);
}
var firstArg = argv['_'][0];
var HOME = process.env.HOME;
var gsyncDir = path.join(HOME, '.gitsync');
fs.ensureDirSync(gsyncDir);
var gsyncFile = path.join(gsyncDir, 'config.json');
fs.ensureFileSync(gsyncFile);
var gsyncCfg = fs.readJsonSync(gsyncFile, {throws: false});
var targetVersion;
var privateName
if (gsyncCfg && gsyncCfg.name) {
  if (argv['_'].length > 1) {
    console.error('只需要一个参数指定daily版本号');
    process.exit(0);
  }
  privateName = gsyncCfg.name;
  targetVersion = argv['_'][0];
  if (!semver.valid(targetVersion)) {
    console.error('请输入daily版本号');
    process.exit(0);
  }
} else {
  if (semver.valid(firstArg)) {
    console.error('第一个参数必须是你的名字，用来作为个人分支名')
    process.exit(0);
  }
  fs.writeJsonSync(gsyncFile, {name: firstArg}, 'utf8');
  privateName = firstArg;
  targetVersion = argv['_'][1];
}

var curBranch = execSync('git symbolic-ref HEAD').toString().trim().replace('refs/heads/','');
var privateBranch = 'dev/' + privateName + '-' + targetVersion;
var dailyBranch = 'daily/' + targetVersion;

if (curBranch == privateBranch || curBranch == dailyBranch) {
  console.error('当前分支为个人分支或者daily分支，不是开发分支');
  process.exit(0);
}
execSync('git add .');
try {
  execSync('git commit -am "git sync"');
} catch (e) {

}
execSync('rm -rf build');
try {
  execSync('git checkout ' + privateBranch);
} catch(e) {
  execSync('git checkout -b ' + privateBranch);
  execSync('git push -u -f origin ' + privateBranch);
}
execSync('git pull');
execSync('git merge ' + curBranch, defaultOption);
execSync('git add .');
try {
  execSync('git commit -am "merge ' + curBranch + '"');
} catch (e) {

}
execSync('git push -u origin ' + privateBranch);
execSync('git checkout master');
execSync('git pull');
execSync('git checkout ' + dailyBranch);
execSync('git pull');
execSync('git merge ' + privateBranch, defaultOption);
// execSync('git push -u origin ' + dailyBranch);
